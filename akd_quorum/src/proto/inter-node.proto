// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under both the MIT license found in the
// LICENSE-MIT file in the root directory of this source tree and the Apache
// License, Version 2.0 found in the LICENSE-APACHE file in the root directory
// of this source tree.

// This contains the protobuf definition for inter-node messaging structures

// Note: install a proper version of protobuf-codegen before re-generating
// protobuf-codegen --version 2.8.1
// Instructions: https://github.com/stepancheg/rust-protobuf/tree/master/protobuf-codegen
// MAKE SURE to cargo install the right version: cargo install protobuf-codegen --version =2.8.1

// Command to re-generate (from 'proto' directory):
// protoc --rust_out . inter-node.proto

syntax = "proto2";

/* NodeLabel represents the label of a history tree node in the AKD tree with a
 * supplied label-length and label value (location) */
message NodeLabel {
    optional uint32 len = 1;
    optional uint64 val = 2;
}

/* Node represents the "label" (location) of the node along with its associated hash */
message Node {
    optional NodeLabel label = 1;
    optional bytes hash = 2;
}

/*
 * Proof that no leaves were deleted from the initial epoch.
 * This means that unchanged_nodes should hash to the initial root hash
 * and the vec of inserted is the set of leaves inserted between these epochs.
 * If we built the tree using the nodes in inserted and the nodes in unchanged_nodes
 * as the leaves, it should result in the final root hash.
*/
message AppendOnlyProof {
    repeated Node inserted = 1;
    repeated Node unchanged = 2;
}

/* NodeContact represents the contact information for a specific
 * node in the quorum set. */
message NodeContact {
    optional string ip_address = 1;
    optional uint32 port = 2;
}

// ======================================================
// Verification requests
// ======================================================

/* VerifyRequest requests that a verification of the append only proof from
 * (epoch-1) with hash previous_hash to (epoch) with hash new_hash is valid. */
message VerifyRequest {
    optional AppendOnlyProof proof = 1;
    optional bytes previous_hash = 2;
    optional bytes new_hash = 3;
    optional uint64 epoch = 4;
}

/* VerifyResponse will response with their quorum key shard partials
 * encrypted with the leader's public key in the event that the
 * proof has verified successfully along with the hash that this node
 * agreed upon */
message VerifyResponse {
    optional bytes encrypted_quorum_key_shard = 1;
    optional bytes verified_hash = 2;
}

/* AddNodeInit starts the adding of a node process which will "test"
 * the potential new member, and if it adheres to the protocol will
 * result in the partial encrypted quorum key shard being transmitted
 * to the leader for processing a new collection of shards.
*/
message AddNodeInit {
    optional bytes public_key = 1;
    optional NodeContact contact_information = 2;
}

/* AddNodeTestResult is the response to an add node init call
 * which contains the resulting pass or failure of a call for a
 * quorum member to determine if the requesting node should be
 * included in the quorum set. */
message AddNodeTestResult {
    optional bytes encrypted_quorum_key_shard = 1;
}

/* AddNodeResult is the final result of an add node process and
 * if it has a resulting shard, then the new member can be enrolled
 * once enough shards are gathered together to decrypt the quorum key */
message AddNodeResult {
    optional bytes encrypted_quorum_key_shard = 1;
    optional uint64 node_id = 2;
    optional bytes public_key = 3;
    optional NodeContact contact_information = 4;
}

// ======================================================
// Inter-Node Message Wrapper
// ======================================================

message InterNodeMessage {
    enum MessageType {
        VERIFY_REQUEST = 0;
        VERIFY_RESPONSE = 1;
        ADD_NODE_INIT = 2;
        ADD_NODE_TEST_RESULT = 3;
        ADD_NODE_RESULT = 4;
        REMOVE_NODE_INIT = 5;
        REMOVE_NODE_TEST_RESULT = 6;
        REMOVE_NODE_RESULT = 7;
    }

    optional MessageType message_type = 1;
    optional bytes payload = 2;
}
